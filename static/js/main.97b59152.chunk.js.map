{"version":3,"sources":["serviceWorker.ts","components/header/ColorModeSwitcher.tsx","constants/routes.ts","components/Navigation.tsx","components/Layout.tsx","hooks/useFetch.ts","components/List.utils.ts","utils/string.ts","components/list/Loading.tsx","components/list/logo/Preview.tsx","components/list/logo/DetailModal.tsx","components/list/Logo.tsx","api/logos.ts","components/List.tsx","components/header/SearchInput.tsx","components/App.tsx","components/AboutProject.tsx","pages/About.tsx","pages/NotFound.tsx","components/Router.tsx","constants/theme.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","ColorModeSwitcher","props","toggleColorMode","useColorMode","text","useColorModeValue","SwitchIcon","FaMoon","FaSun","size","fontSize","color","onClick","icon","aria-label","Routes","Root","Logos","About","Navigation","useLocation","bg","useMediaQuery","isSmall","p","boxShadow","as","height","align","mr","flex","spacing","direction","justify","isActive","pathname","Link","to","marginLeft","ml","href","target","Layout","maxW","overflow","children","useFetch","useFilterLogos","search","logos","useMemo","filter","logo","val1","val2","string1","normalizeSync","toLowerCase","replace","includes","isFirstStringIncludedInSecondString","name","Loading","margin","Preview","cursor","maxWidth","borderRadius","justifyContent","mx","w","src","image","optimized","objectFit","m","compact","DetailModal","isOpen","onClose","overflowX","mt","JSON","stringify","colorScheme","Logo","useState","setIsOpen","LogosApi","all","axios","get","then","r","data","readme","List","useQuery","isLoading","hasData","isFetched","Array","isArray","filteredLogos","mb","length","minChildWidth","gap","map","slug","SearchInput","onDebouncedChange","setSearch","useEffect","timer","setTimeout","clearTimeout","pointerEvents","placeholder","value","onChange","e","currentTarget","App","display","h","val","AboutProject","components","ChakraUIRenderer","NotFound","Router","path","exact","component","styles","global","body","mode","theme","extendTheme","queryClient","QueryClient","ReactDOM","render","QueryClientProvider","client","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.97b59152.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://cra.link/PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://cra.link/PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It is the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import * as React from \"react\";\nimport { useColorMode, useColorModeValue, IconButton } from \"@chakra-ui/react\";\nimport { FaMoon, FaSun } from \"react-icons/fa\";\n\ntype Props = {};\n\nexport const ColorModeSwitcher: React.FC<Props> = (props) => {\n  const { toggleColorMode } = useColorMode();\n  const text = useColorModeValue(\"dark\", \"light\");\n  const SwitchIcon = useColorModeValue(FaMoon, FaSun);\n\n  return (\n    <IconButton\n      size=\"md\"\n      fontSize=\"lg\"\n      color=\"current\"\n      onClick={toggleColorMode}\n      icon={<SwitchIcon />}\n      aria-label={`Switch to ${text} mode`}\n    />\n  );\n};\n","const Routes = {\n  Root: \"/\",\n  Logos: \"/logos\",\n  About: \"/about\",\n};\n\nexport default Routes;\n","import React, { FC } from \"react\";\nimport {\n  Flex,\n  Stack,\n  Heading,\n  Button,\n  IconButton,\n  useColorModeValue,\n  useMediaQuery,\n} from \"@chakra-ui/react\";\nimport { ColorModeSwitcher } from \"src/components/header/ColorModeSwitcher\";\nimport { FaGithub } from \"react-icons/fa\";\nimport { Link, useLocation } from \"react-router-dom\";\nimport Routes from \"src/constants/routes\";\n\ntype Props = {};\n\nconst Navigation: FC<Props> = (props) => {\n  const location = useLocation();\n  const bg = useColorModeValue(\"white\", \"gray.700\");\n  const [isSmall] = useMediaQuery(\"(max-width: 768px)\");\n\n  return (\n    <Flex p=\"6\" boxShadow=\"lg\" as=\"nav\" height=\"80px\" align=\"center\" bg={bg}>\n      {!isSmall && (\n        <Heading as=\"h1\" fontSize=\"2xl\" mr=\"auto\" flex=\"1 1\">\n          Car Logos Dataset\n        </Heading>\n      )}\n      <Stack\n        spacing={2}\n        direction=\"row\"\n        flex=\"1 1\"\n        justify={isSmall ? \"flex-start\" : \"center\"}\n      >\n        <Button\n          isActive={location.pathname === Routes.Logos}\n          size=\"md\"\n          fontSize=\"lg\"\n          color=\"current\"\n          as={Link}\n          to={Routes.Logos}\n        >\n          Logos\n        </Button>\n        <Button\n          isActive={location.pathname === Routes.About}\n          size=\"md\"\n          fontSize=\"lg\"\n          color=\"current\"\n          as={Link}\n          to={Routes.About}\n        >\n          About\n        </Button>\n      </Stack>\n      <Stack\n        spacing={2}\n        direction=\"row\"\n        marginLeft=\"auto\"\n        flex=\"1 1\"\n        ml=\"auto\"\n        justify=\"flex-end\"\n      >\n        <IconButton\n          href=\"https://github.com/filippofilip95/car-logos-dataset\"\n          target=\"_blank\"\n          as=\"a\"\n          size=\"md\"\n          fontSize=\"lg\"\n          color=\"current\"\n          aria-label=\"Car Logos Dataset Github\"\n          icon={<FaGithub />}\n        />\n        <ColorModeSwitcher />\n      </Stack>\n    </Flex>\n  );\n};\n\nexport default Navigation;\n","import React, { FC, ReactNode } from \"react\";\nimport { Container } from \"@chakra-ui/react\";\nimport Navigation from \"src/components/Navigation\";\n\ntype Props = {\n  children?: ReactNode;\n};\n\nconst Layout: FC<Props> = (props) => {\n  return (\n    <>\n      <Navigation />\n      <Container\n        as=\"main\"\n        p={4}\n        maxW=\"container.lg\"\n        height=\"calc(100vh - 80px)\"\n        overflow=\"auto\"\n      >\n        {props.children}\n      </Container>\n    </>\n  );\n};\n\nexport default Layout;\n","import { useEffect, useReducer, useRef } from \"react\";\nimport axios, { AxiosRequestConfig } from \"axios\";\n\n// State & hook output\ninterface State<T> {\n  status: \"init\" | \"fetching\" | \"error\" | \"fetched\";\n  data?: T;\n  error?: string;\n}\n\ninterface Cache<T> {\n  [url: string]: T;\n}\n\n// discriminated union type\ntype Action<T> =\n  | { type: \"request\" }\n  | { type: \"success\"; payload: T }\n  | { type: \"failure\"; payload: string };\n\nfunction useFetch<T = unknown>(\n  url?: string,\n  options?: AxiosRequestConfig\n): State<T> {\n  const cache = useRef<Cache<T>>({});\n  const cancelRequest = useRef<boolean>(false);\n\n  const initialState: State<T> = {\n    status: \"init\",\n    error: undefined,\n    data: undefined,\n  };\n\n  // Keep state logic separated\n  const fetchReducer = (state: State<T>, action: Action<T>): State<T> => {\n    switch (action.type) {\n      case \"request\":\n        return { ...initialState, status: \"fetching\" };\n      case \"success\":\n        return { ...initialState, status: \"fetched\", data: action.payload };\n      case \"failure\":\n        return { ...initialState, status: \"error\", error: action.payload };\n      default:\n        return state;\n    }\n  };\n\n  const [state, dispatch] = useReducer(fetchReducer, initialState);\n\n  useEffect(() => {\n    if (!url) {\n      return;\n    }\n\n    const fetchData = async () => {\n      dispatch({ type: \"request\" });\n\n      if (cache.current[url]) {\n        dispatch({ type: \"success\", payload: cache.current[url] });\n      } else {\n        try {\n          const response = await axios(url, options);\n          cache.current[url] = response.data;\n\n          if (cancelRequest.current) return;\n\n          dispatch({ type: \"success\", payload: response.data });\n        } catch (error) {\n          if (cancelRequest.current) return;\n\n          dispatch({ type: \"failure\", payload: error.message });\n        }\n      }\n    };\n\n    fetchData();\n\n    return () => {\n      cancelRequest.current = true;\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [url]);\n\n  return state;\n}\n\nexport default useFetch;\n","import useFetch from \"src/hooks/useFetch\";\nimport { ManufacturerLogos } from \"src/types/Logos\";\nimport { isFirstStringIncludedInSecondString } from \"src/utils/string\";\nimport { useMemo } from \"react\";\n\nconst url =\n  \"https://raw.githubusercontent.com/filippofilip95/car-logos-dataset/master/logos/data.json\";\n\nexport function useLogos() {\n  return useFetch<ManufacturerLogos>(url);\n}\n\nexport function useFilterLogos(search: string, logos?: ManufacturerLogos) {\n  return useMemo(\n    () =>\n      logos?.filter((logo) =>\n        isFirstStringIncludedInSecondString(search, logo.name)\n      ) ?? [],\n    [search, logos]\n  );\n}\n","import { normalizeSync } from \"normalize-diacritics\";\n\n/**\n * Function is comparing if first string is included second string.\n * Compared strings are processed to find broader match.\n * It's ordinary useful for filtering functionality.\n */\nexport function isFirstStringIncludedInSecondString(\n  val1: string,\n  val2: string\n): boolean {\n  const string1 = normalizeSync(val1.toLowerCase().replace(/\\s/g, \"\"));\n  const string2 = normalizeSync(val2.toLowerCase().replace(/\\s/g, \"\"));\n\n  return string2.includes(string1);\n}\n","import React, { FC } from \"react\";\nimport { Spinner, Stack, Text } from \"@chakra-ui/react\";\n\ntype Props = {};\n\nconst Loading: FC<Props> = (props) => {\n  return (\n    <Stack spacing={4} align=\"center\" margin={8}>\n      <Spinner size=\"xl\" />\n      <Text fontSize=\"lg\">Loading...</Text>\n    </Stack>\n  );\n};\n\nexport default Loading;\n","import React, { FC } from \"react\";\nimport { Box, Flex, Image, useColorModeValue } from \"@chakra-ui/react\";\nimport { ManufacturerLogo } from \"src/types/Logos\";\n\ntype Props = {\n  onClick?: (e: any) => any;\n  logo: ManufacturerLogo;\n  compact?: boolean;\n};\n\nconst Preview: FC<Props> = (props) => {\n  const bg = useColorModeValue(\"gray.100\", \"gray.600\");\n\n  return (\n    <Flex\n      onClick={props.onClick}\n      cursor=\"pointer\"\n      direction=\"column\"\n      boxShadow=\"lg\"\n      maxWidth={\"400px\"}\n      borderRadius=\"xl\"\n      overflow=\"hidden\"\n      bg=\"white\"\n      justifyContent=\"center\"\n      mx=\"auto\"\n      w=\"100%\"\n    >\n      <Image\n        flex=\"1\"\n        src={props.logo.image.optimized}\n        objectFit=\"contain\"\n        m={4}\n      />\n      {!props.compact && (\n        <Box fontSize=\"xl\" bg={bg} p={4}>\n          {props.logo.name}\n        </Box>\n      )}\n    </Flex>\n  );\n};\n\nexport default Preview;\n","import React, { FC } from \"react\";\nimport {\n  Button,\n  Code,\n  ModalBody,\n  ModalCloseButton,\n  ModalContent,\n  ModalFooter,\n  ModalHeader,\n  ModalOverlay,\n  Modal,\n  Box,\n} from \"@chakra-ui/react\";\nimport Preview from \"src/components/list/logo/Preview\";\nimport { ManufacturerLogo } from \"src/types/Logos\";\n\ntype Props = {\n  isOpen: boolean;\n  onClose(): void;\n  logo: ManufacturerLogo;\n};\n\nconst DetailModal: FC<Props> = (props) => {\n  return (\n    <Modal isOpen={props.isOpen} onClose={props.onClose} size=\"4xl\">\n      <ModalOverlay />\n      <ModalContent>\n        <ModalHeader>{props.logo.name}</ModalHeader>\n        <ModalCloseButton />\n        <ModalBody>\n          <Preview logo={props.logo} compact />\n          <Box overflowX=\"scroll\" mt={4}>\n            <Code as=\"pre\">{JSON.stringify(props.logo, null, 2)}</Code>\n          </Box>\n        </ModalBody>\n        <ModalFooter>\n          <Button mr={3} onClick={props.onClose}>\n            Close\n          </Button>\n          <Button colorScheme=\"blue\">Copy to Clipboard</Button>\n        </ModalFooter>\n      </ModalContent>\n    </Modal>\n  );\n};\n\nexport default DetailModal;\n","import React, { FC, useState } from \"react\";\nimport { ManufacturerLogo } from \"src/types/Logos\";\nimport Preview from \"./logo/Preview\";\nimport DetailModal from \"src/components/list/logo/DetailModal\";\n\ntype Props = {\n  logo: ManufacturerLogo;\n};\n\nconst Logo: FC<Props> = (props) => {\n  const [isOpen, setIsOpen] = useState(false);\n\n  function onClose() {\n    setIsOpen(false);\n  }\n\n  function onShow() {\n    setIsOpen(true);\n  }\n\n  return (\n    <>\n      <Preview logo={props.logo} onClick={onShow} />\n      <DetailModal isOpen={isOpen} onClose={onClose} logo={props.logo} />\n    </>\n  );\n};\n\nexport default Logo;\n","import axios from \"axios\";\nimport { ManufacturerLogos } from \"src/types/Logos\";\n\nconst LogosApi = {\n  all() {\n    return axios\n      .get<ManufacturerLogos>(\n        \"https://raw.githubusercontent.com/filippofilip95/car-logos-dataset/master/logos/data.json\"\n      )\n      .then((r) => r.data);\n  },\n  readme() {\n    return axios\n      .get(\n        \"https://raw.githubusercontent.com/filippofilip95/car-logos-dataset/v2/README.md\"\n      )\n      .then((r) => r.data);\n  },\n};\n\nexport default LogosApi;\n","import { Box, SimpleGrid } from \"@chakra-ui/react\";\nimport React, { FC } from \"react\";\nimport { useFilterLogos } from \"src/components/List.utils\";\nimport Loading from \"src/components/list/Loading\";\nimport Logo from \"src/components/list/Logo\";\nimport { useQuery } from \"react-query\";\nimport LogosApi from \"src/api/logos\";\n\ntype Props = {\n  search: string;\n};\n\nconst List: FC<Props> = (props) => {\n  const { data, isLoading, isFetched } = useQuery(\"allLogos\", LogosApi.all);\n  const hasData = isFetched && Array.isArray(data);\n  const filteredLogos = useFilterLogos(props.search, data);\n\n  return (\n    <Box overflow=\"auto\">\n      {isLoading && <Loading />}\n      <Box mb={4}>{filteredLogos.length} results</Box>\n      {hasData && (\n        <SimpleGrid minChildWidth={200} gap={5}>\n          {filteredLogos.map((logo) => (\n            <Logo key={logo.slug} logo={logo} />\n          ))}\n        </SimpleGrid>\n      )}\n    </Box>\n  );\n};\n\nexport default List;\n","import React, { FC, useEffect, useState } from \"react\";\nimport {\n  Input,\n  InputGroup,\n  InputLeftElement,\n  useColorModeValue,\n} from \"@chakra-ui/react\";\nimport { FaSearch } from \"react-icons/all\";\n\ntype Props = {\n  onDebouncedChange: (val: string) => void;\n};\n\nconst debounceTime = 200;\n\nconst SearchInput: FC<Props> = ({ onDebouncedChange }) => {\n  const [search, setSearch] = useState(\"\");\n  const bg = useColorModeValue(\"white\", \"gray.600\");\n\n  useEffect(() => {\n    const timer = setTimeout(() => onDebouncedChange(search), debounceTime);\n    return () => void clearTimeout(timer);\n  }, [search, onDebouncedChange]);\n\n  return (\n    <InputGroup>\n      <InputLeftElement\n        pointerEvents=\"none\"\n        color=\"gray.300\"\n        children={<FaSearch />}\n      />\n      <Input\n        bg={bg}\n        fontSize=\"xl\"\n        icon\n        placeholder=\"Search for manufacturer...\"\n        value={search}\n        onChange={(e) => setSearch(e.currentTarget.value)}\n      />\n    </InputGroup>\n  );\n};\n\nexport default SearchInput;\n","import * as React from \"react\";\nimport List from \"src/components/List\";\nimport { useState } from \"react\";\nimport SearchInput from \"src/components/header/SearchInput\";\nimport { Stack } from \"@chakra-ui/react\";\n\nexport const App = () => {\n  const [search, setSearch] = useState(\"\");\n\n  return (\n    <Stack\n      p={2}\n      spacing={5}\n      display=\"flex\"\n      direction=\"column\"\n      overflow=\"hidden\"\n      h=\"100%\"\n    >\n      <SearchInput onDebouncedChange={(val) => setSearch(val)} />\n      <List search={search} />\n    </Stack>\n  );\n};\n","import React, { FC } from \"react\";\nimport { useQuery } from \"react-query\";\nimport { Box, useColorModeValue } from \"@chakra-ui/react\";\nimport LogosApi from \"src/api/logos\";\nimport Loading from \"src/components/list/Loading\";\nimport ChakraUIRenderer from \"chakra-ui-markdown-renderer\";\nimport ReactMarkdown from \"react-markdown\";\n\ntype Props = {};\n\nconst AboutProject: FC<Props> = (props) => {\n  const { data, isLoading } = useQuery(\"aboutProject\", LogosApi.readme);\n  const bg = useColorModeValue(\"white\", \"gray.600\");\n\n  return (\n    <Box>\n      {isLoading && <Loading />}\n      {data && (\n        <Box bg={bg} p={10} borderRadius={5} boxShadow=\"lg\">\n          <ReactMarkdown components={ChakraUIRenderer()} children={data} />\n        </Box>\n      )}\n    </Box>\n  );\n};\n\nexport default AboutProject;\n","import React, { FC } from \"react\";\nimport AboutProject from \"src/components/AboutProject\";\n\ntype Props = {};\n\nconst About: FC<Props> = (props) => {\n  return <AboutProject />;\n};\n\nexport default About;\n","import React, { FC } from \"react\";\nimport { Box } from \"@chakra-ui/react\";\n\ntype Props = {};\n\nconst NotFound: FC<Props> = (props) => {\n  return <Box>404</Box>;\n};\n\nexport default NotFound;\n","import React, { FC } from \"react\";\nimport { Route, Redirect, Switch } from \"react-router-dom\";\nimport Layout from \"src/components/Layout\";\n\n// main routes\nimport { App } from \"src/components/App\";\nimport About from \"src/pages/About\";\nimport NotFound from \"src/pages/NotFound\";\nimport Routes from \"src/constants/routes\";\n\ntype Props = {};\n\nconst Router: FC<Props> = (props) => {\n  return (\n    <Layout>\n      <Switch>\n        <Route\n          path={Routes.Root}\n          exact\n          component={() => <Redirect to={Routes.Logos} />}\n        />\n        <Route path={Routes.Logos} component={App}></Route>\n        <Route path={Routes.About} component={About}></Route>\n        <Route component={NotFound}></Route>\n      </Switch>\n    </Layout>\n  );\n};\n\nexport default Router;\n","import { extendTheme } from \"@chakra-ui/react\";\nimport { mode } from \"@chakra-ui/theme-tools\";\n\nconst styles = {\n  global: (props) => ({\n    body: {\n      bg: mode(\"gray.50\", \"gray.700\")(props),\n    },\n  }),\n};\n\nconst components = {};\n\nconst theme = extendTheme({\n  components,\n  styles,\n});\n\nexport default theme;\n","import { ChakraProvider, ColorModeScript } from \"@chakra-ui/react\";\nimport * as React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as serviceWorker from \"src/serviceWorker\";\nimport { HashRouter } from \"react-router-dom\";\nimport Router from \"src/components/Router\";\nimport { QueryClient, QueryClientProvider } from \"react-query\";\nimport theme from \"src/constants/theme\";\n\nconst queryClient = new QueryClient();\n\nReactDOM.render(\n  <React.StrictMode>\n    <ColorModeScript />\n    <ChakraProvider theme={theme}>\n      <QueryClientProvider client={queryClient}>\n        <HashRouter>\n          <Router />\n        </HashRouter>\n      </QueryClientProvider>\n    </ChakraProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}